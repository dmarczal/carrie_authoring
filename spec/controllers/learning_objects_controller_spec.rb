require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe LearningObjectsController do

  # This should return the minimal set of attributes required to create a valid
  # LearningObject. As you add validations to LearningObject, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    Fabricate.build(:learning_object).attributes
  end

  describe "GET index" do
    it "assigns all learning_objects as @learning_objects" do
      learning_object = Fabricate(:learning_object) #LearningObject.create! valid_attributes
      get :index
      assigns(:learning_objects).should eq([learning_object])
    end
  end

  describe "GET show" do
    it "assigns the requested learning_object as @learning_object" do
      learning_object = Fabricate(:learning_object)
      get :show, :id => learning_object.id
      assigns(:learning_object).should eq(learning_object)
    end
  end

  describe "GET new" do
    it "assigns a new learning_object as @learning_object" do
      get :new
      assigns(:learning_object).should be_a_new(LearningObject)
    end
  end

  describe "GET edit" do
    it "assigns the requested learning_object as @learning_object" do
      learning_object = Fabricate(:learning_object)
      get :edit, :id => learning_object.id
      assigns(:learning_object).should eq(learning_object)
    end
  end

  describe "POST create"  do
    describe "with valid params" do
      it "creates a new LearningObject" do
        expect {
          post :create, :learning_object => Fabricate.build(:learning_object).attributes
        }.to change(LearningObject, :count).by(1)
      end

      it "assigns a newly created learning_object as @learning_object" do
        post :create, :learning_object => Fabricate.build(:learning_object).attributes
        assigns(:learning_object).should be_a(LearningObject)
        assigns(:learning_object).should be_persisted
      end

      it "redirects to the created learning_object"  do
        post :create, :learning_object => Fabricate.build(:learning_object).attributes
        response.should redirect_to(LearningObject.last)
      end
    end

    describe "with invalid params"  do
      it "assigns a newly created but unsaved learning_object as @learning_object" do
        # Trigger the behavior that occurs when invalid params are submitted
        LearningObject.any_instance.stub(:save).and_return(false)
        post :create, :learning_object => {}
        assigns(:learning_object).should be_a_new(LearningObject)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        LearningObject.any_instance.stub(:save).and_return(false)
        post :create, :learning_object => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested learning_object" do
        learning_object = Fabricate(:learning_object)
        # Assuming there are no other learning_objects in the database, this
        # specifies that the LearningObject created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        LearningObject.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => learning_object.id, :learning_object => {'these' => 'params'}
      end

      it "assigns the requested learning_object as @learning_object" do
        learning_object = Fabricate(:learning_object)
        put :update, :id => learning_object.id, :learning_object => learning_object.attributes
        assigns(:learning_object).should eq(learning_object)
      end

      it "redirects to the learning_object" do
        learning_object = LearningObject.create! valid_attributes
        put :update, :id => learning_object.id, :learning_object => learning_object.attributes
        response.should redirect_to(learning_object)
      end
    end

    describe "with invalid params" do
      it "assigns the learning_object as @learning_object" do
        learning_object = LearningObject.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        LearningObject.any_instance.stub(:save).and_return(false)
        put :update, :id => learning_object.id, :learning_object => {}
        assigns(:learning_object).should eq(learning_object)
      end

      it "re-renders the 'edit' template" do
        learning_object = LearningObject.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        LearningObject.any_instance.stub(:save).and_return(false)
        put :update, :id => learning_object.id, :learning_object => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested learning_object" do
      learning_object = LearningObject.create! valid_attributes
      expect {
        delete :destroy, :id => learning_object.id
      }.to change(LearningObject, :count).by(-1)
    end

    it "redirects to the learning_objects list" do
      learning_object = LearningObject.create! valid_attributes
      delete :destroy, :id => learning_object.id
      response.should redirect_to(learning_objects_url)
    end
  end

  describe "UPDATE exercises position", :focus => true do
    it "should update exercises position" do
      learning_object = Fabricate(:learning_object)
      learning_object.exercises.create Fabricate.build(:exercise, :learning_object => nil).attributes
      learning_object.exercises.create Fabricate.build(:exercise, :learning_object => nil).attributes

      exer_one, exer_two = learning_object.exercises
      post :sort_exercises, :exercise => [exer_two.id,  exer_one.id]

      Exercise.find(exer_one.id).position.should == 2
      Exercise.find(exer_two.id).position.should == 1
      response.body.should be_blank
    end
  end

end
